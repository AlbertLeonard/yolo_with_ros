#!/usr/bin/env python
# 2016-05-20
# Dee

import rospy
import std_msgs

from std_msgs.msg import String
from geometry_msgs.msg import Twist

class baseState:
	
	def __init__(self):
		
		self.velocity = Twist()
		
		self.state_last = String()
		self.state_now = String()
		
		#self.state_last.data = 'Stopped'
		
		self.pub_flag = False
		
		self.base_state_pub = rospy.Publisher('HL_move_base/states', String, queue_size = 1)
		
		rospy.loginfo("Carrus base state publisher initializing...")
		
	def check(self):
		
		self.velocity.linear.x  = self.velocity_deadzone(self.velocity.linear.x)
		self.velocity.linear.y  = self.velocity_deadzone(self.velocity.linear.y)
		self.velocity.linear.z  = self.velocity_deadzone(self.velocity.linear.z)
		self.velocity.angular.x = self.velocity_deadzone(self.velocity.angular.x)
		self.velocity.angular.y = self.velocity_deadzone(self.velocity.angular.y)
		self.velocity.angular.z = self.velocity_deadzone(self.velocity.angular.z)
		
		if (self.velocity.linear.x == 0) and (self.velocity.linear.y == 0) and (self.velocity.angular.z == 0):
			
			self.state_now.data = 'Stopped'
			
		else:
			
			self.state_now.data = 'Running'
			
		#self.state_last = self.state_now
		
		#print '--last--'
		#print self.state_last.data
		
		if (self.state_now.data == self.state_last.data):
			
			self.pub_flag = False
			
		else:
			
			self.pub_flag = True
			
		#print '--now--'	
		#print self.state_now.data
			
	def state_publisher(self):
		
		self.base_state_pub.publish(self.state_now)
		
	def velocity_deadzone(self, vel_in):
		
		if abs(vel_in) < 0.001:
			
			vel_out = 0
			
		else:
			
			vel_out = vel_in
			
		return vel_out
		
	def velocity_callback(self, msg):
		
		self.velocity = msg
		
		self.check()
		
		
		
		if self.pub_flag:
			
			self.state_publisher()
			
			
			print 'publish'
			
		else:
			
			print 'pass'
			pass
		
		self.state_last.data = self.state_now.data
		
		
		
		
#Main 
rospy.init_node('carrus_base_state')

base_state = baseState()

sub_vel = rospy.Subscriber('cmd_vel_mux_joy', Twist, base_state.velocity_callback)

rospy.loginfo("Carrus base state publisher initialized...")

rospy.spin()

