#!/usr/bin/env python

import rospy
import tf
import tf2_ros

import std_msgs
import geometry_msgs
from sensor_msgs.msg import JointState

import moveit_commander
import moveit_msgs.msg

from msg_gateway.msg import Command_msgs
from msg_gateway.srv import MoveArm, MoveArmResponse

class robotControl:
	
	pose_target = geometry_msgs.msg.Pose()
	
	def __init__(self, msg):
		
		#roll_offset  =  0
		#yaw_offset   =  -0.12 #offset
		#pitch_offset =  0

		self.q = tf.transformations.quaternion_from_euler(roll_offset, yaw_offset, pitch_offset)

		self.pose_target.orientation.x = q[0]
		self.pose_target.orientation.y = q[1]
		self.pose_target.orientation.z = q[2]
		self.pose_target.orientation.w = q[3]
		self.pose_target.position.x = 0.4
		self.pose_target.position.y = 0
		self.pose_target.position.z = 0.45
		
		
		
	def arm_rest(self):
	
		pose_target.orientation.w = 1
		pose_target.position.x = 0.155
		pose_target.position.y = 0
		pose_target.position.z = 0.241
		
	def arm_stand_by(self):
	
		pose_target.orientation.w = 1.0
		pose_target.position.x = 0.4
		pose_target.position.y = 0
		pose_target.position.z = 0.45
		
	def joy_callback(self):
		
		
	
COMMAND = Command_msgs()

rospy.init_node("robot_control_amanda")

group = moveit_commander.MoveGroupCommander("my_arm")

arm_rest()
group.go(wait=True)

robot = robotControl()

rate = rospy.Rate(30) # 30hz

while not rospy.is_shutdown():
	
	#group.go(wait=True)
	
	arm_auto()
	
	rospy.sleep(1)
	
	rate.sleep()
