#!/usr/bin/env python

import rospy
import std_msgs

from geometry_msgs.msg import Twist
from msg_gateway.msg import Command_msgs

'''def differ(now, pre ): #Generate UI_msg
	
	global mode, function
	
	if (now.Y - pre.Y) == 1:
		if mode < 3: #3 Modes in Total
			#print 'a'
			mode = mode + 1
		else:
			#print 'b'
			mode = 1
	if (now.SELECT - pre.SELECT) == 1:
		if function < 2: #3 Modes in Total
			function = function + 1
		else:
			function = 1'''
		
	

def callback(msg):

	global GO, STOP 
	
	MSG_pre = msg
	
	if (msg.LT == 1 ) and (msg.RT == 1 ):
		
		GO.linear.x = 0 * msg.LS_V # Base Forward-Backward
		GO.linear.y = 0 * msg.LS_H # Base Left_Cutl-Right_Cut
		GO.linear.z = 0 * (msg.R - msg.L ) # Lifter Up-Down
		
		GO.angular.x = 0 * msg.RS_H # Head Turn Left-Right #Roll Currently Not in Use
		GO.angular.y = 0 * msg.RS_V # Head Up-Down #Yaw
		GO.angular.z = 0 * (msg.LB - msg.RB ) #Base Turn Left-Right #Pitch	
		
		break
	
	if msg.SELECT_ == 1:
		
		GO.linear.x = 0.1 * msg.LS_V # Base Forward-Backward
		GO.linear.y = 0.1 * msg.LS_H # Base Left_Cutl-Right_Cut
		GO.linear.z = 0.1 * (msg.R - msg.L ) # Lifter Up-Down
		
		GO.angular.x = 0.1 * msg.RS_H # Head Turn Left-Right #Roll Currently Not in Use
		GO.angular.y = 0.1 * msg.RS_V # Head Up-Down #Yaw
		GO.angular.z = 0.3 * (msg.LB - msg.RB ) #Base Turn Left-Right #Pitch
		
	else:
		
		GO.linear.x = 0.25 * msg.LS_V # Base Forward-Backward
		GO.linear.y = 0.25 * msg.LS_H # Base Left_Cutl-Right_Cut
		GO.linear.z = 0.25 * (msg.R - msg.L ) # Lifter Up-Down
		
		GO.angular.x = 0.25 * msg.RS_H # Head Turn Left-Right #Roll Currently Not in Use
		GO.angular.y = 0.25 * msg.RS_V # Head Up-Down #Yaw
		GO.angular.z = 0.6 * (msg.LB - msg.RB ) #Base Turn Left-Right #Pitch
		
	#GO.angular.x = 0 # Roll Currently Not in Use
	#GO.angular.y = msg.RS_V # Yaw
	#GO.angular.z = msg.RS_H # Pitch
	
	
	
	
	cmd_vel_pub.publish(GO)


	
	
	
	
#Main 
cmd_vel_pub = rospy.Publisher('cmd_vel', Twist, queue_size = 1 )

STOP = Twist()
GO = Twist()

rospy.init_node('test_bot_joy_control')
	
sub = rospy.Subscriber('command_control/raw', Command_msgs, callback )

#pub = rospy.Publisher('command_control/raw', Command_msgs, queue_size=10 )

rospy.spin()

