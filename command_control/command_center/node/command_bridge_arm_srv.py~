#!/usr/bin/env python

import rospy
import tf
import tf2_ros

from moveit_python import *
from moveit_msgs.msg import Grasp, PlaceLocation
import geometry_msgs
from sensor_msgs.msg import JointState
import std_msgs

import moveit_commander
import moveit_msgs.msg

from msg_gateway.msg import Command_msgs
from msg_gateway.srv import MoveArm, MoveArmResponse

i = 1

def euler_to_quaternion(pitch, roll, yaw):
	
	q = tf.transformations.quaternion_from_euler(roll, yaw, pitch)
	print roll, yaw, pitch
	return q[0],q[1],q[2],q[3]

def arm_rest():
	
	pose_target.position.x = 0.155
	pose_target.position.y = 0
	pose_target.position.z = 0.241
	group.set_pose_target(pose_target)
	
def arm_stand_by():
	
	pose_target.position.x = 0.4
	pose_target.position.y = 0
	pose_target.position.z = 0.45
	group.set_pose_target(pose_target)
	
def service (request):
	
	global pose_target
	
	quaternion = tf.transformations.quaternion_from_euler(request.pitch, request.roll, request.yaw) #euler_to_quaternion(request.pitch, request.roll, request.yaw)
	
	#print quaternion
	
	pose_target.orientation.x = quaternion[0]
	pose_target.orientation.y = quaternion[1]
	pose_target.orientation.z = quaternion[2]
	pose_target.orientation.w = quaternion[3]
	pose_target.position.x = request.x
	pose_target.position.y = request.y
	pose_target.position.z = request.z
	
	group.set_pose_target(pose_target)
	#plan = group.plan()
	group.go(wait=True)
	#group.go(wait=False)
	
	return 1


roll_offset  =  0
yaw_offset   =  0
pitch_offset =  0

q = tf.transformations.quaternion_from_euler(roll_offset, yaw_offset, pitch_offset)

pose_target = geometry_msgs.msg.Pose()
pose_target.orientation.x = q[0]
pose_target.orientation.y = q[1]
pose_target.orientation.z = q[2]
pose_target.orientation.w = q[3]
pose_target.position.x = 0.4
pose_target.position.y = 0
pose_target.position.z = 0.45

COMMAND = Command_msgs()

group = moveit_commander.MoveGroupCommander("my_arm")

#Main Part
rospy.init_node('move_arm_server')

#arm_stand_by()#arm_rest()
#group.go(wait=True)

move_arm_pos = rospy.Service('move_arm', MoveArm, service)

rospy.spin()

